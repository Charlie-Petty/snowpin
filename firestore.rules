rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- USERS COLLECTION ---
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      // A user can update their own profile, or an admin can.
      allow update: if isOwner(userId) || isAdmin();

      // Subcollections for user-specific, private data
      match /vouchesGiven/{creatorId} {
        allow read, write: if isOwner(userId);
      }
      match /notifications/{notificationId} {
        allow create: if isAdmin();
        allow read, delete: if isOwner(userId);
        allow update: if false;
      }
    }

    // --- PINS COLLECTION ---
    match /pins/{pinId} {
      // READ ACCESS: Anyone can read any pin. The app's code is responsible
      // for filtering out unapproved pins for non-admins. This solves
      // the core permissions error on the homepage and map.
      allow read, list: if true;

      // WRITE ACCESS (Protected)
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      
      // Only the pin's creator or an admin can update/delete it.
      allow update, delete: if isOwner(resource.data.createdBy) || isAdmin();

      // --- SUBCOLLECTIONS of PINS ---
      match /reviews/{reviewId} {
        allow read, list: if true;
        allow create: if isOwner(request.resource.data.userId);
        // Users can mark a review as helpful/inaccurate, but not change it.
        allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['helpfulCount', 'flagCount']);
        allow delete: if isAdmin(); // Only admins can delete problematic reviews.
      }
      match /favorites/{userId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
      match /votes/{userId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
      match /flags/{userId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
      match /vouches/{userId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
      match /nameSuggestions/{suggestionId} {
        allow read, list: if true;
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if isAdmin();
      }
      match /dethroneChallenges/{challengeId} {
        allow read, list: if true;
        allow create: if isOwner(request.resource.data.challengerId);
        allow update, delete: if isAdmin();
      }
    }

    // --- COLLECTION GROUP RULES ---
    // These must allow broad reads for the app to function correctly.
    // The security is handled by the more specific rules above.
    match /{path=**}/reviews/{reviewId} {
      allow list, read: if true;
    }
    match /{path=**}/favorites/{favoriteId} {
      allow list, read: if true;
    }
    match /{path=**}/dethroneChallenges/{challengeId} {
      allow list, read: if true;
    }
    match /{path=**}/nameSuggestions/{suggestionId} {
      allow list, read: if true;
    }
  }
}